version: '3.8'

services:
  # ML Model Training Service (runs once)
  ml-trainer:
    build:
      context: ./ml-model
      dockerfile: Dockerfile
    container_name: titanic-ml-trainer
    volumes:
      - ml-models:/app/models
      - ml-data:/app/data
    networks:
      - titanic-network
    command: ["sh", "-c", "python download_data.py && python train.py && echo 'Model training completed'"]
    profiles:
      - training

  # FastAPI Backend Service
  fastapi-backend:
    build:
      context: ./fastapi-backend
      dockerfile: Dockerfile
    container_name: titanic-fastapi-backend
    ports:
      - "8000:8000"
    volumes:
      - ml-models:/app/models:ro
    environment:
      - PYTHONPATH=/app
      - MODEL_PATH=/app/models
    networks:
      - titanic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Java Frontend Service
  java-frontend:
    build:
      context: ./java-frontend
      dockerfile: Dockerfile
    container_name: titanic-java-frontend
    ports:
      - "8080:8080"
    environment:
      - JAVA_OPTS=-Xmx512m -Xms256m
      - FASTAPI_URL=http://fastapi-backend:8000
    depends_on:
      - fastapi-backend
    networks:
      - titanic-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: titanic-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - fastapi-backend
      - java-frontend
    networks:
      - titanic-network
    restart: unless-stopped
    profiles:
      - proxy

networks:
  titanic-network:
    driver: bridge

volumes:
  ml-models:
    driver: local
  ml-data:
    driver: local
